// Generated by Dagger (https://dagger.dev).
package com.example.poststask.data.repo;

import com.example.poststask.data.local.PostDao;
import com.example.poststask.data.remote.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.example.poststask.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_Factory implements Factory<Repository> {
  private final Provider<ApiService> apiServiceProvider;

  private final Provider<PostDao> postDAOProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public Repository_Factory(Provider<ApiService> apiServiceProvider,
      Provider<PostDao> postDAOProvider, Provider<CoroutineDispatcher> dispatcherProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.postDAOProvider = postDAOProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public Repository get() {
    return newInstance(apiServiceProvider.get(), postDAOProvider.get(), dispatcherProvider.get());
  }

  public static Repository_Factory create(Provider<ApiService> apiServiceProvider,
      Provider<PostDao> postDAOProvider, Provider<CoroutineDispatcher> dispatcherProvider) {
    return new Repository_Factory(apiServiceProvider, postDAOProvider, dispatcherProvider);
  }

  public static Repository newInstance(ApiService apiService, PostDao postDAO,
      CoroutineDispatcher dispatcher) {
    return new Repository(apiService, postDAO, dispatcher);
  }
}
